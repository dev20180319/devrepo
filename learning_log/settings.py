"""
Django settings for learning_log project.

Generated by 'django-admin startproject' using Django 2.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'm+t6x3$kyr%)q!k0*8c*ig^ni8auw7hyc!h@144ima6+3hb17i'

# SECURITY WARNING: don't run with debug turned on in production!
# 安全警告：不要在在线环境中启用调试！
# DEBUG = False
DEBUG = True

ALLOWED_HOSTS = ['localhost', '127.0.0.1','*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # 第三方应用程序
    'bootstrap3',
    'rest_framework',

    # 我的应用程序
    'learning_logs',
    'users',
    'booklist',
    'restapi',
    'echarts',
    'toupiao',
    # 'ajax',
    'weixinapp',
    'vuejsapp',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'learning_log.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'learning_log/templates'),
            os.path.join(BASE_DIR, 'vuefront/dist'),
        ],
        # os.path.join(BASE_DIR, 'templates')没了这句，
        # 会显示django.template.exceptions.TemplateDoesNotExist: index.html
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'learning_log.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }

    # 'default': {
    #     'ENGINE': 'sql_server.pyodbc',
    #     'NAME': 'DEV_Python_LearningLog',
    #     'USER': 'dev_python_sa',
    #     'PASSWORD': 'dev_python_sa',
    #     'HOST':'10.144.12.86',
    #     'OPTIONS': {
    #         'driver': 'SQL Server Native Client 10.0',
    #         # 'server': '10.144.12.86',
    #         'MARS_Connection': True,
    #         # 'dsn': 'MSSQL-PYTHON',
    #         # 'database':'DEV_Python_LearningLog',
    #     },
    }


# 在终端中,测试时：
# python manage.py shell
# import pyodbc
# conn=pyodbc.connect(DRIVER='SQL Server Native Client 10.0',server='10.144.12.86',user='dev_python_sa',password='dev_python_sa',database='DEV_Python_LearningLog')
# curs = conn.execute('select * from some_table')
# curs.fetchone()


# set this to False if you want to turn off pyodbc's connection pooling
# DATABASE_CONNECTION_POOLING = False

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

# LANGUAGE_CODE = 'en-us'

# LANGUAGE_CODE = ‘zh-cn’
LANGUAGE_CODE = 'zh-hans'  #1.9以后

# TIME_ZONE = 'UTC'
TIME_ZONE = 'Asia/Shanghai'
# TIME_ZONE = 'Asia/Beijing'  # 报错pytz.exceptions.UnknownTimeZoneError: 'Asia/Beijing'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# STATIC SETTINGS
# django 静态文件的配置说明
# http://blog.csdn.net/alxandral_brother/article/details/52202270

# 当运行 python manage.py collectstatic 的时候
# STATIC_ROOT 文件夹 是用来将所有STATICFILES_DIRS中所有文件夹中的文件，以及各app中static中的文件都复制过来
# 把这些文件放到一起是为了用apache等部署的时候更方便
STATIC_ROOT = os.path.join(BASE_DIR, "collected_static")

# django利用STATIC_URL来让浏览器可以直接访问静态文件
# url访问重定位：  http://127.0.0.1:8000/urlstatic/booklist/img/1.jpg
STATIC_URL = '/static/'

# 其它存放静态文件的文件夹
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "learning_log/common_static"),
    os.path.join(BASE_DIR, "vuefront/dist/static"),
]

#系统会自动搜索 app 路径下的static文件夹

MEDIA_ROOT = os.path.join(BASE_DIR, "upload/media")

# 定义登录页面，登录限制重定向
LOGIN_URL = '/users/login/'

# django rest framework 配置
REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
    ],
    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.NamespaceVersioning'
}